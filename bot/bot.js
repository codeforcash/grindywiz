const KeybaseBot = require('keybase-bot');
const AWS = require('aws-sdk')
const fs = require('fs');
const { getKeybaseCredentials } = require('./secret');
const SolutionGrader = require('./solution-grader.js');


class Bot {

	constructor() {
		this.bot = new KeybaseBot();	
		this.users = {};
		this.problems = JSON.parse(fs.readFileSync('problems.json', 'utf8'));
	}

	async init() {
		try {
			this.lambdaFunctionName = await this.getLambdaFunctionName();
			const creds = await getKeybaseCredentials().catch((credentialsError) => {
				console.error('Error fetching bot credentials');
				process.exit();
			});
			await this.bot.init(creds.username, creds.paperkey, {verbose: false})
			console.log(`Bot is logged in as ${this.bot.myInfo().username}`)
			const message = {
				body: `Bot restarted.`,
			}
			await this.bot.chat.send(this.makeChannel('zackburt'), message)
			console.log('Init message sent!')
			await this.bot.chat.watchAllChannelsForNewMessages(this.onMessage, this.onError)
		} catch (error) {
			console.error(error)
		}
	}

	onError(e) {
		 console.error(e)
	}

	getUserState (username) {
		if(!(username in this.users)) {
			this.users[username] = {
				currentProblem: null,
				lastSolutionReceivedTime: null
			}
		}
		return this.users[username];
	}

	shareProblem (username, problem) {
		const { statement, functionName, inputParams, returnType } = this.problems[problem];
		let body = `${statement}\n\nPlease name your function \`${functionName}\` and define your code using Keybase style for code formatting; `;
		body += `i.e., wrapped in triple backticks.\n\n`; 
		body += `For example:\n\n\`;
		body += ``\`\`function ${functionName}(${inputParams.join(', ')}) {\n    \/\/ do something\n    return ${returnType};\n}\`\`\``;
		this.bot.send(makeChannel(username), { body } )
	}

	makeChannel(username) {
		return {
				name: username + ',' + this.bot.myInfo().username, 
				public: false, 
				topicType: 'chat' 
		}
	}

	gradeSolution(code, currentProblem) {
		return this.solutionGrader.gradeSolution(code, currentProblem);
	}


	async handleFeedback(feedback) {

	}
	
	getLambdaFunctionName() {
		return new Promise((resolve) => {

			this.lambda = new AWS.Lambda({region: 'us-east-1'});
			this.lambda.listFunctions({}, (err, data) => { 
				for(const fxn of data.Functions) {
					if(/GrindyWiz/.test(fxn.FunctionName)) { // We don't hard-code since name is generated by CloudFormation
						this.solutionGrader = new SolutionGrader(this.lambda, fxn.FunctionName);
						resolve(fxn.FunctionName);
						return;
					}
				}
			})
		});
	}

}

Bot.prototype.onMessage = require('./handle-message.js');

module.exports = Bot;
